#!/usr/bin/env ruby

def setup
  log "Installing gems"
  # Only do bundle install if the much-faster
  # bundle check indicates we need to
  system! "bundle check || bundle install"

  log "Installing Node modules"
  # Only do yarn install if the much-faster
  # yarn check indicates we need to. Note that
  # --check-files is needed to force Yarn to actually
  # examine what's in node_modules
  system! "bin/yarn check --check-files || bin/yarn install"

  log "Dropping & recreating the development database"
  # Note that the very first time this runs, db:reset
  # will fail, but this failure is fixed by
  # doing a db:migrate
  system! "bin/rails db:reset || bin/rails db:migrate"

  log "Dropping & recreating the test database"
  # Setting the RAILS_ENV explicitly to be sure
  # we actually reset the test database
  system!({ "RAILS_ENV" => "test" }, "bin/rails db:reset")

  log "All set up."
  log ""
  log "To see commonly-needed commands, run:"
  log ""
  log "    bin/setup help"
  log ""
end

def help
  log "Useful commands:"
  log ""
  log " bin/run"
  log "     # run app locally"
  log ""
  log " LOGRAGE_IN_DEVELOPMENT=true bin/run"
  log "     # run app locally using"
  log "     # production-like logging"
  log ""
  log " bin/ci"
  log "     # runs all tests and checks as CI would"
  log ""
  log " bin/setup help"
  log "     # show this help"
  log ""
end

# start of helpers

# We don't want the setup method to have
# to do all this error checking, and we
# also want to explicitly log what we
# are executing, so we use this method
# instead of Kernel#system and friends
def system!(*args)
  log "Executing #{args}"
  if system(*args)
    log "#{args} succeeded"
  else
    log "#{args} failed"
    abort
  end
end

# It's helpful to know what messages came
# from this script, so we'll use log
# instead of puts to communicate with the user
def log(message)
  puts "[ bin/setup ] #{message}"
end

if ARGV[0] == "help"
  help
else
  setup
end
